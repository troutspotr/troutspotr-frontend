@import 'src/ui/styles/_colors';
@import 'src/ui/styles/_variables';
@import 'src/ui/styles/fallback';

.container {
  height: 100%;
  width: 100%;
  transition: font-size ease-in-out 250ms;
}

@media (max-width: 800px) {
  .container {
    font-size: 0.85em;
  }
}

.containerExpanded {
  composes: container;
  font-size: 5em;
}

:global(.ts-light) {
  .container {
    --backdrop-state-background: #{darken(transparentize($backgroundLight, 0.3), 50)};
    --selected-region-background: #{darken(transparentize($backgroundLight, 0.1), 20)};
  }
}

:global(.ts-dark) {
  .container {
    --backdrop-state-background: lighten($backgroundDark, 2);
    --selected-region-background: lighten($backgroundDark, 10);
  }
}

.sneezeGuard {
  fill: transparent;
}

.polygon {
  fill: transparent;
  transition: stroke 800ms, fill 800ms;
  stroke-linejoin: round;
}

.states {
  composes: polygon;
  transition: stroke 800ms, fill 800ms;
  @include fallback(stroke, --text-color-primary, $textDark);
  @include fallback(fill, --backdrop-state-background, $backgroundLight);
  transform-origin: center;
  cursor: pointer;
}

.statesInactive {
  composes: states;
  @include fallback(stroke, --text-color-primary, $offTextDark);
  transform-origin: center;
}

.selectedStates {
  composes: polygon;
  transition: stroke 800ms;
  @include fallback(stroke, --text-color-primary, $textDark);
  transform-origin: center;
  // this backdrop is not for interactivity.
  pointer-events: none;
}

.regions {
  composes: polygon;
  @include fallback(stroke, --text-color-primary, $offTextDark);
  @include fallback(fill, --selected-region-background, green);
  cursor: pointer;
  // g:hover {
  //   fill: transparentize($gray, 0);
  //   cursor: pointer;
  // }
}

.stateLabels {
  transition: fill 800ms;
  text-anchor: middle;
  @include fallback(fill, --text-color-primary, $offTextDark);
  user-select: none;
}

.stateLabelsInactive {
  composes: stateLabels;
  @include fallback(fill, --text-color-secondary, $offTextDark);
}

.regionLabels {
  text-anchor: middle;
  @include fallback(fill, --text-color-primary, $offTextDark);
  user-select: none;
}

:global(.ts-light) {
  .stateLabels {
    @include fallback(fill, --white, white);
  }

  .stateLabelsInactive {
    @include fallback(fill, --white, white);
  }

  .regionLabels {
    @include fallback(fill, --white, white);
  }
}

.loadingRegions {
  composes: polygon;
  // stroke-dasharray: 10 5;
  // animation: dash 30s linear infinite;
  @include fallback(stroke, --blue, $blueDark);
}

@keyframes dash {
  to {
    stroke-dashoffset: 1500;
  }
}

.counties {
  composes: polygon;
}

.centroids {
  composes: polygon;
  pointer-events: none;

  .closed {
    // fill: transparentize($blueGray, 0.3);
  }

  .open {
    // fill: transparentize($blue, 0.3);
  }
}

.selectedStreamCentroid {
  composes: polygon;
  // fill: $blue;
}

.selectedRegions {
  pointer-events: none;

  g {
    // stroke: $blue;
    // stroke-width: 0.8px;
  }

  composes: polygon;
}

.cachedRegion {
  // fill: transparentize($green, 0.8)
  // fill: transparentize($gray, 0.1);
}

.notChachedRegion {
  // fill: transparentize($blue, 0.1);
}

.regions .inactiveRegion {
  stroke: $gray;
  // stroke-width: 0.2px;
  // fill: transparentize($background, 0.1);
  cursor: default;
  :hover {
    fill: none !important;
    cursor: default;
    pointer-events: none;
  }
}

.gpsCoordinates {
  composes: centroids;
  // fill: transparentize($red, 0.3);
}
